{
  "Description": "This template deploys a VPC, with a pair of public and private subnets spread across two Availability Zones. It deploys an Internet Gateway, with a default route on the public subnets. It deploys a pair of NAT Gateways (one in each AZ), and default routes for them in the private subnets.",
  "Parameters": {
      "EnvironmentName": {
          "Description": "An environment name that will be prefixed to resource names",
          "Type": "String",
          "Default": "python-miniproject"
      },
      "VpcCIDR": {
          "Description": "Please enter the IP range (CIDR notation) for this VPC",
          "Type": "String",
          "Default": "10.0.0.0/16"
      },
      "PublicSubnet1CIDR": {
          "Description": "Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone",
          "Type": "String",
          "Default": "10.0.0.0/20"
      },
      "PublicSubnet2CIDR": {
          "Description": "Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone",
          "Type": "String",
          "Default": "10.0.16.0/20"
      },
      "PrivateSubnet1CIDR": {
          "Description": "Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone",
          "Type": "String",
          "Default": "10.0.32.0/20"
      },
      "PrivateSubnet2CIDR": {
          "Description": "Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone",
          "Type": "String",
          "Default": "10.0.48.0/20"
      },
      "KeyPairName": {
          "Description": "Please enter the key pair name to use when creating EC2 resources",
          "Type": "String",
          "Default": "MyKeyPair"
      }
  },
  "Resources": {
      "VPC": {
          "Type": "AWS::EC2::VPC",
          "Properties": {
              "CidrBlock": {
                  "Ref": "VpcCIDR"
              },
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": {
                          "Ref": "EnvironmentName"
                      }
                  }
              ]
          }
      },
      "InternetGateway": {
          "Type": "AWS::EC2::InternetGateway",
          "Properties": {
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": {
                          "Ref": "EnvironmentName"
                      }
                  }
              ]
          }
      },
      "InternetGatewayAttachment": {
          "Type": "AWS::EC2::VPCGatewayAttachment",
          "Properties": {
              "InternetGatewayId": {
                  "Ref": "InternetGateway"
              },
              "VpcId": {
                  "Ref": "VPC"
              }
          }
      },
      "PublicSubnet1": {
          "Type": "AWS::EC2::Subnet",
          "Properties": {
              "VpcId": {
                  "Ref": "VPC"
              },
              "AvailabilityZone": {
                  "Fn::Select": [
                      0,
                      {
                          "Fn::GetAZs": ""
                      }
                  ]
              },
              "CidrBlock": {
                  "Ref": "PublicSubnet1CIDR"
              },
              "MapPublicIpOnLaunch": true,
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": {
                          "Fn::Sub": "${EnvironmentName} Public Subnet (AZ1)"
                      }
                  }
              ]
          }
      },
      "PublicSubnet2": {
          "Type": "AWS::EC2::Subnet",
          "Properties": {
              "VpcId": {
                  "Ref": "VPC"
              },
              "AvailabilityZone": {
                  "Fn::Select": [
                      1,
                      {
                          "Fn::GetAZs": ""
                      }
                  ]
              },
              "CidrBlock": {
                  "Ref": "PublicSubnet2CIDR"
              },
              "MapPublicIpOnLaunch": true,
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": {
                          "Fn::Sub": "${EnvironmentName} Public Subnet (AZ2)"
                      }
                  }
              ]
          }
      },
      "PrivateSubnet1": {
          "Type": "AWS::EC2::Subnet",
          "Properties": {
              "VpcId": {
                  "Ref": "VPC"
              },
              "AvailabilityZone": {
                  "Fn::Select": [
                      0,
                      {
                          "Fn::GetAZs": ""
                      }
                  ]
              },
              "CidrBlock": {
                  "Ref": "PrivateSubnet1CIDR"
              },
              "MapPublicIpOnLaunch": false,
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": {
                          "Fn::Sub": "${EnvironmentName} Private Subnet (AZ1)"
                      }
                  }
              ]
          }
      },
      "PrivateSubnet2": {
          "Type": "AWS::EC2::Subnet",
          "Properties": {
              "VpcId": {
                  "Ref": "VPC"
              },
              "AvailabilityZone": {
                  "Fn::Select": [
                      1,
                      {
                          "Fn::GetAZs": ""
                      }
                  ]
              },
              "CidrBlock": {
                  "Ref": "PrivateSubnet2CIDR"
              },
              "MapPublicIpOnLaunch": false,
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": {
                          "Fn::Sub": "${EnvironmentName} Private Subnet (AZ2)"
                      }
                  }
              ]
          }
      },
      "NatGateway1EIP": {
          "Type": "AWS::EC2::EIP",
          "DependsOn": "InternetGatewayAttachment",
          "Properties": {
              "Domain": "vpc"
          }
      },
      "NatGateway2EIP": {
          "Type": "AWS::EC2::EIP",
          "DependsOn": "InternetGatewayAttachment",
          "Properties": {
              "Domain": "vpc"
          }
      },
      "NatGateway1": {
          "Type": "AWS::EC2::NatGateway",
          "Properties": {
              "AllocationId": {
                  "Fn::GetAtt": [
                      "NatGateway1EIP",
                      "AllocationId"
                  ]
              },
              "SubnetId": {
                  "Ref": "PublicSubnet1"
              }
          }
      },
      "NatGateway2": {
          "Type": "AWS::EC2::NatGateway",
          "Properties": {
              "AllocationId": {
                  "Fn::GetAtt": [
                      "NatGateway2EIP",
                      "AllocationId"
                  ]
              },
              "SubnetId": {
                  "Ref": "PublicSubnet2"
              }
          }
      },
      "PublicRouteTable": {
          "Type": "AWS::EC2::RouteTable",
          "Properties": {
              "VpcId": {
                  "Ref": "VPC"
              },
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": {
                          "Fn::Sub": "${EnvironmentName} Public Routes"
                      }
                  }
              ]
          }
      },
      "DefaultPublicRoute": {
          "Type": "AWS::EC2::Route",
          "DependsOn": "InternetGatewayAttachment",
          "Properties": {
              "RouteTableId": {
                  "Ref": "PublicRouteTable"
              },
              "DestinationCidrBlock": "0.0.0.0/0",
              "GatewayId": {
                  "Ref": "InternetGateway"
              }
          }
      },
      "PublicSubnet1RouteTableAssociation": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
              "RouteTableId": {
                  "Ref": "PublicRouteTable"
              },
              "SubnetId": {
                  "Ref": "PublicSubnet1"
              }
          }
      },
      "PublicSubnet2RouteTableAssociation": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
              "RouteTableId": {
                  "Ref": "PublicRouteTable"
              },
              "SubnetId": {
                  "Ref": "PublicSubnet2"
              }
          }
      },
      "PrivateRouteTable1": {
          "Type": "AWS::EC2::RouteTable",
          "Properties": {
              "VpcId": {
                  "Ref": "VPC"
              },
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": {
                          "Fn::Sub": "${EnvironmentName} Private Routes (AZ1)"
                      }
                  }
              ]
          }
      },
      "DefaultPrivateRoute1": {
          "Type": "AWS::EC2::Route",
          "Properties": {
              "RouteTableId": {
                  "Ref": "PrivateRouteTable1"
              },
              "DestinationCidrBlock": "0.0.0.0/0",
              "NatGatewayId": {
                  "Ref": "NatGateway1"
              }
          }
      },
      "PrivateSubnet1RouteTableAssociation": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
              "RouteTableId": {
                  "Ref": "PrivateRouteTable1"
              },
              "SubnetId": {
                  "Ref": "PrivateSubnet1"
              }
          }
      },
      "PrivateRouteTable2": {
          "Type": "AWS::EC2::RouteTable",
          "Properties": {
              "VpcId": {
                  "Ref": "VPC"
              },
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": {
                          "Fn::Sub": "${EnvironmentName} Private Routes (AZ2)"
                      }
                  }
              ]
          }
      },
      "DefaultPrivateRoute2": {
          "Type": "AWS::EC2::Route",
          "Properties": {
              "RouteTableId": {
                  "Ref": "PrivateRouteTable2"
              },
              "DestinationCidrBlock": "0.0.0.0/0",
              "NatGatewayId": {
                  "Ref": "NatGateway2"
              }
          }
      },
      "PrivateSubnet2RouteTableAssociation": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
              "RouteTableId": {
                  "Ref": "PrivateRouteTable2"
              },
              "SubnetId": {
                  "Ref": "PrivateSubnet2"
              }
          }
      },
      "NoIngressSecurityGroup": {
          "Type": "AWS::EC2::SecurityGroup",
          "Properties": {
              "GroupName": "no-ingress-sg",
              "GroupDescription": "Security group with no ingress rule",
              "VpcId": {
                  "Ref": "VPC"
              }
          }
      },
      "LoadBalancerSecurityGroup": {
          "Type": "AWS::EC2::SecurityGroup",
          "Properties": {
              "GroupName": "securitygroup-alb",
              "GroupDescription": {
                  "Fn::Sub": "Security group used for ${EnvironmentName} load balancer"
              },
              "SecurityGroupIngress": [
                  {
                      "CidrIp": "0.0.0.0/0",
                      "Description": "Http in from internet",
                      "FromPort": 80,
                      "IpProtocol": "tcp",
                      "ToPort": 80
                  }
              ],
              "VpcId": {
                  "Ref": "VPC"
              }
          }
      },
      "ApplicationSecurityGroup": {
          "Type": "AWS::EC2::SecurityGroup",
          "Properties": {
              "GroupName": "securitygroup-ec2",
              "GroupDescription": {
                "Fn::Sub": "Security group used for ${EnvironmentName} ec2 instances"
              },
              "SecurityGroupIngress": [
                  {
                      "SourceSecurityGroupId": {
                          "Ref": "LoadBalancerSecurityGroup"
                      },
                      "Description": "Http in from load balancer",
                      "FromPort": 80,
                      "IpProtocol": "tcp",
                      "ToPort": 80
                  }
              ],
              "VpcId": {
                  "Ref": "VPC"
              }
          }
      },
      "IamRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
              "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Effect": "Allow",
                          "Principal": {
                            "Service": [ "ec2.amazonaws.com" ]
                          },
                          "Action": [
                              "sts:AssumeRole"
                          ]
                      }
                  ]
              },
              "ManagedPolicyArns": [
                  "arn:aws:iam::aws:policy/AmazonS3FullAccess"
              ],
              "Path": "/"
          }
      },
      "IamRoleInstanceProfile": {
          "Type": "AWS::IAM::InstanceProfile",
          "Properties": {
              "Path": "/",
              "Roles": [
                  {
                      "Ref": "IamRole"
                  }
              ]
          }
      },
      "ApplicationLoadBalancer": {
          "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
          "Properties": {
              "IpAddressType": "ipv4",
              "Scheme": "internet-facing",
              "SecurityGroups": [
                  {
                      "Ref": "LoadBalancerSecurityGroup"
                  }
              ],
              "Subnets": [
                  {
                      "Ref": "PublicSubnet1"
                  },
                  {
                      "Ref": "PublicSubnet2"
                  }
              ],
              "Type": "application"
          }
      },
      "TargetGroup": {
          "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
          "Properties": {
              "HealthCheckPath": "/message",
              "Port": 80,
              "Protocol": "HTTP",
              "VpcId": {
                  "Ref": "VPC"
              }
          }
      },
      "LoadBalancerListener": {
          "Type": "AWS::ElasticLoadBalancingV2::Listener",
          "Properties": {
              "DefaultActions": [{
                  "Type": "forward",
                  "TargetGroupArn": { "Ref": "TargetGroup" }
              }],
            "LoadBalancerArn": { "Ref": "ApplicationLoadBalancer" },
            "Port": 80,
            "Protocol": "HTTP"
          }
      },
      "LaunchConfiguration": {
          "Type": "AWS::AutoScaling::LaunchConfiguration",
          "Properties": {
              "AssociatePublicIpAddress": false,
              "IamInstanceProfile": {
                  "Ref": "IamRoleInstanceProfile"
              },
              "ImageId": "ami-013be31976ca2c322",
              "InstanceType": "t2.micro",
              "KeyName": {
                  "Ref": "KeyPairName"
              },
              "SecurityGroups": [
                  {
                      "Ref": "ApplicationSecurityGroup"
                  }
              ],
              "UserData": {"Fn::Base64" : { "Fn::Join" : ["", [
                "#!/bin/bash -xe\n",
                "yum install -y python3 python3-pip\n",
                "account_id=$(aws sts get-caller-identity --output text --query 'Account')\n",
                "bucket=\"$account_id-erickson-miniproject\"\n",
                "mkdir /app\n",
                "aws s3 sync s3://$bucket /app\n",
                "pip3 install -r /app/requirements.txt\n",
                "python3 /app/app.py"
              ]]}}
          }
      },
      "AutoScalingGroup": {
          "Type": "AWS::AutoScaling::AutoScalingGroup",
          "Properties": {
              "DesiredCapacity": 2,
              "HealthCheckGracePeriod": 300,
              "HealthCheckType": "ELB",
              "LaunchConfigurationName": {
                  "Ref": "LaunchConfiguration"
              },
              "MaxSize": 2,
              "MinSize": 2,
              "TargetGroupARNs": [
                  {
                      "Ref": "TargetGroup"
                  }
              ],
              "VPCZoneIdentifier": [
                  {
                      "Ref": "PrivateSubnet1"
                  },
                  {
                      "Ref": "PrivateSubnet2"
                  }
              ]
          }
      }
  },
  "Outputs": {
      "VPC": {
          "Description": "A reference to the created VPC",
          "Value": {
              "Ref": "VPC"
          }
      },
      "URL": {
          "Description": "The URL to the message api",
          "Value": {
                  "Fn::Join" : [
                      "", [
                          "http://",
                          {
                            "Fn::GetAtt" : [
                                "ApplicationLoadBalancer" ,
                                "DNSName"
                            ]
                          },
                          "/message"
                      ]
                  ]
            }
        }
  }
}